///////////////////////////////////////////////////////////
/// @file	Result.h
/// @brief	Result
/// @author	henaiguo
///////////////////////////////////////////////////////////

#ifndef __LIGHT_IPC_RESULT_H
#define __LIGHT_IPC_RESULT_H

#include <string>

namespace LightIPC {
///////////////////////////////////////////////////////////
/// @class	Result
/// @brief	Result
/// @note
///////////////////////////////////////////////////////////
class Result
{
public:
	///////////////////////////////////////////////////////////
	/// @brief		Generate a result object (success)
	///////////////////////////////////////////////////////////
	static Result CreateSuccess();

	///////////////////////////////////////////////////////////
	/// @brief		Generate a result object (error occurred)
	/// @param[in]	_errorMessage Error message
	///////////////////////////////////////////////////////////
	static Result CreateError(const char *_errorMessage, ...);

	///////////////////////////////////////////////////////////
	/// @brief	Constructor
	/// @note	No error
	///////////////////////////////////////////////////////////
	Result();

	///////////////////////////////////////////////////////////
	/// @brief	Constructor
	/// @param[in]	_result Success or error
	/// @param[in]	_errorMessage Error message
	/// @note
	///////////////////////////////////////////////////////////
	Result(bool _result, const std::string& _errorMessage = "");

	///////////////////////////////////////////////////////////
	/// @brief	Copy constructor
	/// @param[in]	_result Result
	/// @note
	///////////////////////////////////////////////////////////
	Result(const Result& _result);

	///////////////////////////////////////////////////////////
	/// @brief	Destructor
	/// @note
	///////////////////////////////////////////////////////////
	virtual ~Result();
	
	///////////////////////////////////////////////////////////
	/// @brief	Get error message
	/// @return	std::string
	/// @note
	///////////////////////////////////////////////////////////
	const std::string &ErrorMessage() const;

	///////////////////////////////////////////////////////////
	/// @brief	Check if there is an error
	/// @note	True on success and false on error
	///////////////////////////////////////////////////////////
	operator bool() const;

	///////////////////////////////////////////////////////////
	/// @brief	Success or not
	/// @return bool
	/// @note	True on success
	///////////////////////////////////////////////////////////
	bool IsSuccess() const;

	///////////////////////////////////////////////////////////
	/// @brief	Error or not
	/// @return bool
	/// @note	True on error
	///////////////////////////////////////////////////////////
	bool IsError() const;

private:
	/// Result true:success false:error
	bool m_result;

	/// Error message
	std::string m_errorMessage;
};
}

#endif
